#!/bin/bash
########################################################################
# cp-tag
#
# cross-package tagger for art, critic, and gallery
#
# Requires MANAGER role on all packages to be tagged (including ART).
#
#
# Takes at least one version argument,
########################################################################

# Subsidiary packages to be tagged, These must be in order: ie package
# n's product_list must set up package n+1.
##declare -a art_packages=(messagefacility fhicl-cpp cetlib cpp0x)
##declare -a critic_packages=(art canvas messagefacility fhicl-cpp cetlib)
##declare -a gallery_packages=(canvas messagefacility fhicl-cpp cetlib)

function ensure_gitconfig() {
    local package=$1
    ssh p-$1@cdcvs.fnal.gov "git config --global user.name '$package admin'; git config --global user.email 'artists@fnal.gov'"
}

function maybe_tag() {
    local tag=$1
    shift
    cat <<EOF
git tag | grep -qe '^'"$tag"'\$' && echo "tag $tag already exists: doing nothing." || \
  { echo "applying tag $tag."; git tag -am '$tag_msg' '$tag' "$*" && git update-server-info; }
EOF
}

function ptag() {
    local package=$1
    local tag=$2
    local pv=$3
    printf "Tagging version $pv of $package with cross-package tag $tag: "
    ssh p-$1@cdcvs.fnal.gov "cd '/cvs/projects/${package}' && `maybe_tag $tag \"$pv\"`"
}

function product_for() {
  local package=$1
  case $package in
      fhicl-cpp)
        echo "fhiclcpp"
      ;;
      *)
        echo "$package"
  esac
}

prog=${0##*/}

function usage() {
    cat 1>&2 <<EOF
${prog} --help|-h|-\?
${prog} --tagtype|-t <art|critic|gallery> <tag>+
EOF
}

getopt -T >/dev/null 2>&1
if (( $? != 4 )); then
  echo "ERROR: GNU getopt required! Check SETUP_GETOPT and PATH." 1>&2
  exit 1
fi

TEMP=`getopt -n "$prog" -o ':h\?:t:' --long help -l tagtype: -- "${@}"`

eval set -- "$TEMP"
while true; do
  case $1 in
    --help|-h|-\?)
      usage
      exit 1
      ;;
    --tagtype|-t)
      shift
      tag_type="$1"
      shift
      echo "tag type is $tag_type"
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Bad argument \"$1\"" 1>&2
      usage
      exit 1
  esac
done

[[ -z "$1" ]] && { echo "Require existing $tag_type tag as non-option argument" 1>&2; exit 1; }

if [[ -z "$tag_type" ]]; then
   echo "tag type is unspecified, defaulting to art"
   tag_type=art
fi

case $tag_type in
  "art" )
    declare -a packages=(messagefacility fhicl-cpp cetlib cpp0x)
    suite_name=ART_SUITE
    ;;
  "critic" )
    # critic is a special case, we are going to explicitly check and tag both critic and art
    declare -a packages=(canvas messagefacility fhicl-cpp cetlib)
    suite_name=ART_SUITE
    ;;
  "gallery" )
    declare -a packages=(canvas messagefacility fhicl-cpp cetlib)
    suite_name=GALLERY_SUITE
   ;;
  * )
    echo "unrecognized tag type $tag_type"
    usage
    exit 1
    ;;
esac

# Tag message.
tag_msg='$tag_type suite cross-package tag'

while [[ -n "$1" ]]; do
  pkg_version=$1
  shift
  if [[ $tag_type == "art" ]];then
    pkg_version_bits=($(echo "$pkg_version" | sed -e 's&^v\([0-9]\{1,\}\)_\([0-9]\{1,\}\)_\([0-9]\{1,\}\)\(.*\)$&\1 \2 \3 \4&'))
    if (( ${pkg_version_bits[0]} > 1 )) || { (( ${pkg_version_bits[0]} == 1 )) && (( ${pkg_version_bits[1]} >= 18 )); }; then
      # cpp0x was dropped from v1_18_00+
      unset packages[3]
    fi
  fi
  ensure_gitconfig $tag_type

  # no longer quite so simple
  #ssh p-$tag_type@cdcvs.fnal.gov "cd /cvs/projects/$tag_type && { git tag | grep -q $pkg_version || { echo 'Unable to find $tag_type tag ${pkg_version}' 1>&2; exit 1; }; } && `maybe_tag \"${suite_name}_${pkg_version}\" \"${pkg_version}\"`"
  tag_list=`ssh p-$tag_type@cdcvs.fnal.gov "cd /cvs/projects/$tag_type && git tag | grep $pkg_version | grep -v ${suite_name}_${pkg_version}"`
  #echo "found tag $tag_list"
  if [[ $tag_list != $pkg_version ]]; then
    echo "Unable to find $tag_type tag ${pkg_version}"
    exit 1
  fi
  # critic is a special case, we need to check ups/product_deps for the art release
  if [[ $tag_type == "critic" ]];then
     echo "checking critic"
     critic_version=${pkg_version}
     pkg_version=`wget --no-check-certificate -q -O - "https://cdcvs.fnal.gov/redmine/projects/critic/repository/raw/ups/product_deps?rev=${pkg_version}" | \
	 grep    -e '^[ 	]*'"art"'[ 	]\{1,\}' | \
	 sed -e 's/^[ 	]*'"art"'[ 	]\{1,\}\(v[^ 	]*\).*$/\1/'`
     echo "tagging for $pkg_version"
     ssh p-critic@cdcvs.fnal.gov "cd /cvs/projects/critic && { git tag | grep -q $critic_version || { echo 'Unable to find critic tag ${critic_version}' 1>&2; exit 1; }; } && `maybe_tag \"${suite_name}_${pkg_version}\" \"${critic_version}\"`"
     ssh p-art@cdcvs.fnal.gov "cd /cvs/projects/art && { git tag | grep -q $pkg_version || { echo 'Unable to find art tag ${pkg_version}' 1>&2; exit 1; }; } && `maybe_tag \"${suite_name}_${pkg_version}\" \"${pkg_version}\"`"
     last_pkg=art
  else
     echo "$tag_type is OK"
     ssh p-$tag_type@cdcvs.fnal.gov "cd /cvs/projects/$tag_type && { git tag | grep -q $pkg_version || { echo 'Unable to find $tag_type tag ${pkg_version}' 1>&2; exit 1; }; } && `maybe_tag \"${suite_name}_${pkg_version}\" \"${pkg_version}\"`"
     last_pkg=$tag_type
  fi
  for package in "${packages[@]}"; do
    product=`product_for "$package"`
    pv=`wget --no-check-certificate -q -O - "https://cdcvs.fnal.gov/redmine/projects/${last_pkg}/repository/raw/ups/product_deps?rev=${suite_name}_${pkg_version}" | \
     grep    -e '^[ 	]*'"$product"'[ 	]\{1,\}' | \
     sed -e 's/^[ 	]*'"$product"'[ 	]\{1,\}\(v[^ 	]*\).*$/\1/'`
    if [[ -n "$pv" ]]; then
      echo "Found $package tag $pv corresponding to $tag_type tag $pkg_version."
    else
      echo "Could not find tag for package $package corresponding to $tag_type tag $pkg_version." 1>&2
      continue
    fi
    ensure_gitconfig $package
    ptag "${package}" "${suite_name}_${pkg_version}" "${pv}"
    last_pkg=${package}
  done
done
