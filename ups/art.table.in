File    = table
Product = @product@
#*************************************************
# Starting Group definition
Group:

Flavor     = ANY
Qualifiers = ""
  Action = setup
       prodDir()
       setupRequired(cetbuildtools @CETBUILDTOOLS_VERSION@ @CETBUILDTOOLS_QUAL@)
       execute( "get-directory-name subdir", UPS_ENV, ${UPS_PROD_NAME_UC}_FQ )
       fileTest( ${UPS_PROD_DIR}/${${UPS_PROD_NAME_UC}_FQ}, -d, "${UPS_PROD_DIR}/${${UPS_PROD_NAME_UC}_FQ} directory not found: SETUP ABORTED")
       exeActionRequired("setup__")

Flavor     = ANY
Qualifiers = "@qualifier@"
  Action = setup
       prodDir()
       setupRequired(cetbuildtools @CETBUILDTOOLS_VERSION@ @CETBUILDTOOLS_QUAL@)
       execute( "get-directory-name subdir @qualifier@", UPS_ENV, ${UPS_PROD_NAME_UC}_FQ )
       fileTest( ${UPS_PROD_DIR}/${${UPS_PROD_NAME_UC}_FQ}, -d, "${UPS_PROD_DIR}/${${UPS_PROD_NAME_UC}_FQ} directory not found: SETUP ABORTED")
       exeActionRequired("setup__")

Common:
  Action = setup__
    setupEnv()
    envSet(${UPS_PROD_NAME_UC}_VERSION, @version@)
    prodDir( _FQ_DIR, ${${UPS_PROD_NAME_UC}_FQ} )

    # define PROD_DIR_INC if there is an appropriate include subdirectory
    if    ( sh -c 'for dd in ${${UPS_PROD_NAME_UC}_FQ}/include include;do [ -d ${UPS_PROD_DIR}/$dd ] && exit;done;exit 1' )
        prodDir( _INC, "`sh -c 'for dd in ${${UPS_PROD_NAME_UC}_FQ}/include include;do [ -d ${UPS_PROD_DIR}/$dd ] && echo $dd && exit;done;exit 1'`" )
    else ()
        execute( true, NO_UPS_ENV )
    endif ( sh -c 'for dd in ${${UPS_PROD_NAME_UC}_FQ}/include include;do [ -d ${UPS_PROD_DIR}/$dd ] && exit;done;exit 1' )

    # define PROD_DIR_LIB if there is an appropriate lib subdirectory
    if    ( sh -c 'for dd in ${${UPS_PROD_NAME_UC}_FQ}/lib lib;do [ -d ${UPS_PROD_DIR}/$dd ] && exit;done;exit 1' )
        prodDir( _LIB, "`sh -c 'for dd in ${${UPS_PROD_NAME_UC}_FQ}/lib lib;do [ -d ${UPS_PROD_DIR}/$dd ] && echo $dd && exit;done;exit 1'`" )
        pathPrepend(LD_LIBRARY_PATH, ${${UPS_PROD_NAME_UC}_LIB})
    else ()
        execute( true, NO_UPS_ENV )
    endif ( sh -c 'for dd in ${${UPS_PROD_NAME_UC}_FQ}/lib lib;do [ -d ${UPS_PROD_DIR}/$dd ] && exit;done;exit 1' )

    # add the bin directory to the path if it exists
    if    ( sh -c 'for dd in ${${UPS_PROD_NAME_UC}_FQ}/bin bin;do [ -d ${UPS_PROD_DIR}/$dd ] && exit;done;exit 1' )
        pathPrepend(PATH, ${UPS_PROD_DIR}/"`sh -c 'for dd in ${${UPS_PROD_NAME_UC}_FQ}/bin bin;do [ -d ${UPS_PROD_DIR}/$dd ] && echo $dd && exit;done;exit 1'`" )
    else ()
        execute( true, NO_UPS_ENV )
	execute( echo "ERROR: art is not available for flavor qualifier ${UPS_PROD_FLAVOR} ${UPS_PROD_QUALIFIERS}", UPS_ENV )
    endif ( sh -c 'for dd in ${${UPS_PROD_NAME_UC}_FQ}/bin bin;do [ -d ${UPS_PROD_DIR}/$dd ] && exit;done;exit 1' )


    # uncomment or add to this list as relevant
    setupRequired(cmake)
    setupRequired(cetbuildtools @CETBUILDTOOLS_VERSION@ @CETBUILDTOOLS_QUAL@)
    setupRequired(cppunit   @CPPUNIT_VERSION@ @CPPUNIT_QUAL@)
    setupRequired(gccxml    @GCCXML_VERSION@ @GCCXML_QUAL@)
    setupRequired(libsigcpp @LIBSIGCPP_VERSION@ @LIBSIGCPP_QUAL@)
    setupRequired(clhep     @CLHEP_VERSION@ @CLHEP_QUAL@)
    setupRequired(root      @ROOT_VERSION@ @ROOT_QUAL@)
    setupRequired(messagefacility @MESSAGEFACILITY_VERSION@ @MESSAGEFACILITY_QUAL@)
    setupRequired(fhiclcpp  @FHICLCPP_VERSION@ @FHICLCPP_QUAL@)
    setupRequired(cpp0x     @CPP0X_VERSION@ @CPP0X_QUAL@)
    setupRequired(cetlib    @CETLIB_VERSION@ @CETLIB_QUAL@)
    setupRequired(boost     @BOOST_VERS@ @BOOST_QUAL@)
    setupRequired(gcc       @GCC_VERSION@ @GCC_QUAL@)

End:
# End Group definition
#*************************************************
